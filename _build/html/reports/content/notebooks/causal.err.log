Traceback (most recent call last):
  File "/Users/matthewfisher/.pyenv/versions/3.11.4/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/matthewfisher/.pyenv/versions/3.11.4/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matthewfisher/.pyenv/versions/3.11.4/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/matthewfisher/.pyenv/versions/3.11.4/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/matthewfisher/.pyenv/versions/3.11.4/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/matthewfisher/.pyenv/versions/3.11.4/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/matthewfisher/.pyenv/versions/3.11.4/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Creating the DataFrame
df = pd.DataFrame({'Stress': S, 'Diet': D, 'Exercise': E, 'Health': H})

# Fit the linear regression model for Pr(H | D, E)
X = df[['Diet', 'Exercise']]  # Independent variables
Y = df['Health']  # Dependent variable
X = sm.add_constant(X)  # Add a constant term for the intercept

model = sm.OLS(Y, X).fit()
print(model.summary())

# Prepare the data for prediction, including the constant term
X_mc_high = np.column_stack((np.ones(n_mc), S_samples, D_samples, E_high))

# Predict H using the model and input structure for high exercise
H_do_Ehigh = model.predict(X_mc_high)
average_H_do_Ehigh = np.mean(H_do_Ehigh)

# Perform Monte Carlo simulation to estimate Pr(H | do(E = low))
# Set E to low (0) for all samples in the Monte Carlo simulation
E_low = np.zeros(n_mc)

# Prepare the data for prediction, including the constant term
X_mc_low = np.column_stack((np.ones(n_mc), S_samples, D_samples, E_low))

# Predict H using the model and input structure for low exercise
H_do_Elow = model.predict(X_mc_low)
average_H_do_Elow = np.mean(H_do_Elow)

print(f"Average Health Outcome | do(E=high): {average_H_do_Ehigh}")
print(f"Average Health Outcome | do(E=low): {average_H_do_Elow}")
------------------

----- stdout -----
                            OLS Regression Results                            
==============================================================================
Dep. Variable:                 Health   R-squared:                       0.722
Model:                            OLS   Adj. R-squared:                  0.722
Method:                 Least Squares   F-statistic:                     1296.
Date:                Fri, 01 Mar 2024   Prob (F-statistic):          5.40e-278
Time:                        12:54:13   Log-Likelihood:                -2301.1
No. Observations:                1000   AIC:                             4608.
Df Residuals:                     997   BIC:                             4623.
Df Model:                           2                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
const          8.6773      0.177     49.067      0.000       8.330       9.024
Diet          -0.6193      0.026    -23.605      0.000      -0.671      -0.568
Exercise       7.1782      0.156     46.047      0.000       6.872       7.484
==============================================================================
Omnibus:                        0.759   Durbin-Watson:                   1.968
Prob(Omnibus):                  0.684   Jarque-Bera (JB):                0.826
Skew:                          -0.013   Prob(JB):                        0.662
Kurtosis:                       2.862   Cond. No.                         16.0
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[10], line 16[0m
[1;32m     13[0m X_mc_high [38;5;241m=[39m np[38;5;241m.[39mcolumn_stack((np[38;5;241m.[39mones(n_mc), S_samples, D_samples, E_high))
[1;32m     15[0m [38;5;66;03m# Predict H using the model and input structure for high exercise[39;00m
[0;32m---> 16[0m H_do_Ehigh [38;5;241m=[39m [43mmodel[49m[38;5;241;43m.[39;49m[43mpredict[49m[43m([49m[43mX_mc_high[49m[43m)[49m
[1;32m     17[0m average_H_do_Ehigh [38;5;241m=[39m np[38;5;241m.[39mmean(H_do_Ehigh)
[1;32m     19[0m [38;5;66;03m# Perform Monte Carlo simulation to estimate Pr(H | do(E = low))[39;00m
[1;32m     20[0m [38;5;66;03m# Set E to low (0) for all samples in the Monte Carlo simulation[39;00m

File [0;32m~/.pyenv/versions/3.11.4/lib/python3.11/site-packages/statsmodels/base/model.py:1176[0m, in [0;36mResults.predict[0;34m(self, exog, transform, *args, **kwargs)[0m
[1;32m   1129[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m   1130[0m [38;5;124;03mCall self.model.predict with self.params as the first argument.[39;00m
[1;32m   1131[0m 
[0;32m   (...)[0m
[1;32m   1171[0m [38;5;124;03mreturned prediction.[39;00m
[1;32m   1172[0m [38;5;124;03m"""[39;00m
[1;32m   1173[0m exog, exog_index [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_transform_predict_exog(exog,
[1;32m   1174[0m                                                 transform[38;5;241m=[39mtransform)
[0;32m-> 1176[0m predict_results [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmodel[49m[38;5;241;43m.[39;49m[43mpredict[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mparams[49m[43m,[49m[43m [49m[43mexog[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m
[1;32m   1177[0m [43m                                     [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m   1179[0m [38;5;28;01mif[39;00m exog_index [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m [38;5;28mhasattr[39m(predict_results,
[1;32m   1180[0m                                           [38;5;124m'[39m[38;5;124mpredicted_values[39m[38;5;124m'[39m):
[1;32m   1181[0m     [38;5;28;01mif[39;00m predict_results[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m1[39m:

File [0;32m~/.pyenv/versions/3.11.4/lib/python3.11/site-packages/statsmodels/regression/linear_model.py:411[0m, in [0;36mRegressionModel.predict[0;34m(self, params, exog)[0m
[1;32m    408[0m [38;5;28;01mif[39;00m exog [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    409[0m     exog [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mexog
[0;32m--> 411[0m [38;5;28;01mreturn[39;00m [43mnp[49m[38;5;241;43m.[39;49m[43mdot[49m[43m([49m[43mexog[49m[43m,[49m[43m [49m[43mparams[49m[43m)[49m

[0;31mValueError[0m: shapes (10000,4) and (3,) not aligned: 4 (dim 1) != 3 (dim 0)

